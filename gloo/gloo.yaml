---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/2-gloo-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/3-discovery-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/5-gateway-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/8-gateway-proxy-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
  name: gateway-proxy
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/templates/32-apiserver-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: apiserver-ui
  name: apiserver-ui
  namespace: default # .Values.apiServer.enable
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/2-gloo-usage-configmap.yaml
# use this config map to record envoy usage stats
apiVersion: v1
kind: ConfigMap
metadata:
  name: gloo-usage
  namespace: default
  labels:
    app: gloo
    gloo: gloo-usage
data:
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/9-gateway-proxy-configmap.yaml
# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-proxy-envoy-config
  namespace: default
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
data:

  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          overload:
            global_downstream_max_connections: 250000
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gateway
      id: "{{.PodName}}.{{.PodNamespace}}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{.PodNamespace}}~gateway-proxy"
    stats_sinks:
      - name: envoy.metrics_service
        config:
          grpc_service:
            envoy_grpc: {cluster_name: gloo.default.svc.cluster.local:9966}
    static_resources:
      listeners: # if or $statsConfig.enabled (or $spec.readConfig $spec.extraListenersHelper) # $spec.extraListenersHelper
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: "/stats/prometheus"
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.router
                        config: {} # if $statsConfig.enabled # if $spec.readConfig
      clusters:
      - name: gloo.default.svc.cluster.local:9977
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.default.svc.cluster.local:9977
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.default.svc.cluster.local
                    port_value: 9977
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: wasm-cache
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: wasm-cache
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.default.svc.cluster.local
                    port_value: 9979
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: gloo.default.svc.cluster.local:9966
        alt_stat_name: metrics_cluster
        connect_timeout: 5.000s
        load_assignment:
            cluster_name: gloo.default.svc.cluster.local:9966
            endpoints:
            - lb_endpoints:
              - endpoint:
                    address:
                        socket_address:
                            address: gloo.default.svc.cluster.local
                            port_value: 9966
        http2_protocol_options: {}
        type: STRICT_DNS # if .Values.accessLogger.enabled # if $spec.tracing
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000 # if or $statsConfig.enabled ($spec.readConfig) # if $spec.tracing
    dynamic_resources:
      ads_config:
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.default.svc.cluster.local:9977}
      cds_config:
        ads: {}
      lds_config:
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000 # if (empty $spec.configMap.data) ## allows full custom # range $name, $spec := .Values.gatewayProxies# if .Values.gateway.enabled
---
# Source: gloo/charts/gloo-os-with-ui/templates/37-apiserver-envoy-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-apiserver-envoy-config
  namespace: default
  labels:
    app: gloo
    gloo: apiserver-ui
data:
  config.yaml: |-
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: ingress_http
              route_config:
                name: gloo-webgrpc
                virtual_hosts:
                - name: gloo-webgrpc
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                      headers:
                      - name: content-type
                        prefix_match: application/grpc
                    route:
                      cluster: gloo-grpcserver
                      timeout: 15s
                  - match:
                      prefix: "/"
                    route:
                      cluster: gloo-ui
                      timeout: 15s
                  cors:
                    allow_origin_string_match:
                    - safe_regex:
                        google_re2: {}
                        regex: \*
                    allow_methods: GET, PUT, DELETE, POST, OPTIONS
                    allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web
                    max_age: "1728000"
                    expose_headers: grpc-status,grpc-message
                    filter_enabled: # the values 100/HUNDRED are the default. Still, we want to explicitly define them until we know that the envoy we are using conforms to the new api
                      default_value:
                        numerator: 100
                        denominator: HUNDRED
              http_filters:
              - name: envoy.filters.http.grpc_web
              - name: envoy.filters.http.cors
              - name: envoy.filters.http.router
      clusters:
      - name: gloo-grpcserver
        connect_timeout: 0.25s
        type: logical_dns
        http2_protocol_options: {}
        lb_policy: round_robin
        load_assignment:
          cluster_name: gloo-grpcserver
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 10101
      - name: gloo-ui
        connect_timeout: 0.25s
        type: static
        lb_policy: round_robin
        load_assignment:
          cluster_name: gloo-ui
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 20202
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: kube-resource-watcher-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "secrets", "endpoints", "configmaps", "namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-upstream-mutator-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["upstreams"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-reader-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io", "enterprise.gloo.solo.io"]
  resources: ["upstreams","upstreamgroups", "proxies", "authconfigs"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""] # get/update on configmaps for recording envoy metrics
  resources: ["configmaps"]
  verbs: ["get", "update"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: settings-user-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["settings"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "create"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gloo-resource-mutator-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gloo.solo.io"]
  resources: ["proxies"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/20-namespace-clusterrole-gateway.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: gateway-resource-reader-default
    labels:
        app: gloo
        gloo: rbac
rules:
- apiGroups: ["gateway.solo.io"]
  resources: ["virtualservices", "routetables"]
  # update is needed for status updates
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["gateway.solo.io"]
  resources: ["gateways"]
  # update is needed for status updates, create for creating the default ones.
  verbs: ["get", "list", "watch", "create", "update"]
---
# Source: gloo/charts/gloo-os-with-ui/templates/36-apiserver-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: apiserver-ui-default
  labels:
    app: gloo
    gloo: rbac
rules:
# Group 1: these rules apply to read-only and enterprise apiserver
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps", "namespaces", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["artifacts", "upstreams", "upstreamgroups", "proxies", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["settings"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: ["gateway.solo.io"]
    resources: ["gateways"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gateway.solo.io"]
    resources: ["virtualservices", "routetables"]
    verbs: ["get", "list", "watch"] # .Values.apiServer.enterprise # .Values.apiServer.enable
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-resource-watcher-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
- kind: ServiceAccount
  name: discovery
  namespace: default
roleRef:
  kind: ClusterRole
  name: kube-resource-watcher-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-upstream-mutator-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-upstream-mutator-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-reader-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-resource-reader-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: settings-user-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gloo
  namespace: default
- kind: ServiceAccount
  name: gateway
  namespace: default
- kind: ServiceAccount
  name: discovery
  namespace: default
roleRef:
  kind: ClusterRole
  name: settings-user-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-resource-mutator-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-resource-mutator-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/23-namespace-clusterrolebinding-gateway.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gateway-resource-reader-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
- kind: ServiceAccount
  name: gateway
  namespace: default
roleRef:
  kind: ClusterRole
  name: gateway-resource-reader-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/templates/35-apiserver-rolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: apiserver-ui-role-binding-default
  labels:
    app: gloo
    gloo: rbac
subjects:
  - kind: ServiceAccount
    name: apiserver-ui
    namespace: default
roleRef:
  kind: ClusterRole
  name: apiserver-ui-default
  apiGroup: rbac.authorization.k8s.io # .Values.apiServer.enable # glooRbac.create
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/2-gloo-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
spec:
  ports:
  - name: grpc-xds
    port: 9977
    protocol: TCP
  - name: grpc-validation
    port: 9988
    protocol: TCP
  - name: metrics-grpc
    port: 9966
    protocol: TCP
  - name: wasm-cache
    port: 9979
    protocol: TCP
  selector:
    gloo: gloo
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/5-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    discovery.solo.io/function_discovery: disabled
    app: gloo
    gloo: gateway
  name: gateway
  namespace: default
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    # this should map to projects/gateway/pkg/defaults.ValidationWebhookBindPort
    targetPort: 8443
  selector:
    gloo: gateway
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/8-gateway-proxy-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
  name: gateway-proxy
  namespace: default
  annotations:
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8081"
    prometheus.io/scrape: "true"
spec:
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  selector:
    gateway-proxy-id: gateway-proxy
    gateway-proxy: live
  type: LoadBalancer # $spec.service.loadBalancerIP # $spec.service.loadBalancerSourceRanges # $spec.service.type "LoadBalancer"
---
# Source: gloo/charts/gloo-os-with-ui/templates/34-apiserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: apiserver-ui
  namespace: default
  labels:
    app: gloo
    gloo: apiserver-ui
  annotations:
    gloo.solo.io/h2_service: "true"
spec:
  ports:
    - name: static
      port: 8080
      protocol: TCP
  selector:
    gloo: apiserver-ui
  type: ClusterIP # .Values.apiServer.enable
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/1-gloo-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gloo
  name: gloo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gloo
  template:
    metadata:
      labels:
        gloo: gloo
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gloo
      volumes:
      - name: labels-volume
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
      containers:
      - image: quay.io/solo-io/gloo:1.4.10
        imagePullPolicy: IfNotPresent
        name: gloo
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 9977
          name: grpc-xds
          protocol: TCP
        - containerPort: 9988
          name: grpc-validation
          protocol: TCP
        - containerPort: 9979
          name: wasm-cache
          protocol: TCP
        volumeMounts:
        - name: labels-volume
          mountPath: /etc/gloo
          readOnly: true
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
        readinessProbe:
          tcpSocket:
            port: 9977
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/3-discovery-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: discovery
  name: discovery
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: discovery
  template:
    metadata:
      labels:
        gloo: discovery
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: discovery
      containers:
      - image: quay.io/solo-io/discovery:1.4.10
        imagePullPolicy: IfNotPresent
        name: discovery
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/5-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway
  name: gateway
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway
  template:
    metadata:
      labels:
        gloo: gateway
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: gateway
      containers:
      - image: quay.io/solo-io/gateway:1.4.10
        imagePullPolicy: IfNotPresent
        name: gateway
        ports:
          - containerPort: 8443
            name: https
            protocol: TCP

        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"
          - name: VALIDATION_MUST_START
            value: "true"
        volumeMounts:
          - mountPath: /etc/gateway/validation-certs
            name: validation-certs
        readinessProbe:
          tcpSocket:
            port: 8443
          initialDelaySeconds: 1
          periodSeconds: 2
          failureThreshold: 10
      volumes:
        - name: validation-certs
          secret:
            defaultMode: 420
            secretName: gateway-validation-certs
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/7-gateway-proxy-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: gateway-proxy
  name: gateway-proxy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      gloo: gateway-proxy
      gateway-proxy-id: gateway-proxy
  template:
    metadata:
      labels:
        gloo: gateway-proxy
        gateway-proxy-id: gateway-proxy
        gateway-proxy: live

      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8081"
        prometheus.io/scrape: "true"
    spec:
      securityContext:
        fsGroup: 10101
        runAsUser: 10101
      serviceAccountName: gateway-proxy
      containers:
      - args:
          - --disable-hot-restart
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: quay.io/solo-io/gloo-envoy-wrapper:1.4.10
        imagePullPolicy: IfNotPresent
        name: gateway-proxy
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config # $global.glooMtls.enabled # $spec.extraContainersHelper # $global.glooMtls.enabled
      volumes:
      - configMap:
          name: gateway-proxy-envoy-config
        name: envoy-config
---
# Source: gloo/charts/gloo-os-with-ui/templates/33-apiserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: default
  labels:
    app: gloo
    gloo: apiserver-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gloo
      gloo: apiserver-ui
  template:
    metadata:
      labels:
        app: gloo
        gloo: apiserver-ui
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: apiserver-ui
      securityContext:
        runAsNonRoot: true
        runAsUser: 10101
      containers:
        - name: apiserver-ui
          image: quay.io/solo-io/grpcserver-ui:1.4.9
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: empty-cache
              mountPath: /var/cache/nginx
            - name: empty-run
              mountPath: /var/run
          ports:
            - name: static
              containerPort: 8080
              protocol: TCP
        - name: apiserver
          image: quay.io/solo-io/grpcserver-ee:1.4.9
          imagePullPolicy: IfNotPresent
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: GRPC_PORT
              value: '10101'
            - name: START_STATS_SERVER
              value: "true" # stats
            - name: NO_AUTH
              value: "1" # .Values.apiServer.enterprise
          ports:
            - name: grpcport
              containerPort: 10101
              protocol: TCP
        - name: gloo-grpcserver-envoy
          image: quay.io/solo-io/grpcserver-envoy:1.4.9
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            periodSeconds: 10
            initialDelaySeconds: 5
          volumeMounts:
          - name: envoy-config
            mountPath: /etc/envoy
            readOnly: true
      volumes:
        - name: empty-cache
          emptyDir: {}
        - name: empty-run
          emptyDir: {}
        - name: envoy-config
          configMap:
            name: default-apiserver-envoy-config # .Values.apiServer.enable
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/7-gateway-proxy-deployment.yaml
# if envoySidecar
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/9-gateway-proxy-configmap.yaml
# if envoySidecar
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/8-default-gateways.yaml
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  name: gateway-proxy
  namespace: default
  labels:
    app: gloo
spec:
  bindAddress: "::"
  bindPort: 8080
  httpGateway: {}
  useProxyProto: false
  ssl: false
  proxyNames:
  - gateway-proxy
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/8-default-gateways.yaml
apiVersion: gateway.solo.io/v1
kind: Gateway
metadata:
  name: gateway-proxy-ssl
  namespace: default
  labels:
    app: gloo
spec:
  bindAddress: "::"
  bindPort: 8443
  httpGateway: {}
  useProxyProto: false
  ssl: true
  proxyNames:
  - gateway-proxy
---
# Source: gloo/charts/gloo-os-with-ui/templates/40-settings.yaml
apiVersion: gloo.solo.io/v1
kind: Settings
metadata:
  labels:
    app: gloo
    gloo: settings
  name: default
  namespace: default
spec:
  gloo:
    xdsBindAddr: "0.0.0.0:9977"
    disableKubernetesDestinations: false
    disableProxyGarbageCollection: false
  discoveryNamespace: default
  kubernetesArtifactSource: {}
  kubernetesConfigSource: {}
  kubernetesSecretSource: {}
  refreshRate: 60s
  gateway:
    validation:
      proxyValidationServerAddr: "gloo:9988"
      alwaysAccept: true
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
  name: certgen
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
# Resources created as hooks are not considered part of a release by Helm. This means that they
# will not be cleaned up when running `helm uninstall`. The ways to get around this are documented here:
# https://helm.sh/docs/topics/charts_hooks/#hook-resources-are-not-managed-with-corresponding-releases).
# These will not work for us though: we can't use `hook-delete-policy` since we have multiple hooks that depend
# on each other (RBAC resources needed by the job), and we cannot write a job to clean them up as this would result
# in a catch-22 (this second job would in turn need its own RBAC resources and who would clean up those?).
#
# To be able to clean up these hook resources, which are needed only temporarily during the pre-install phase,
# we redefine them as `post-install` hooks with a `hook-delete-policy`. This way Helm will reapply them and
# immediately delete them after the installation completes. Note that we have to explicitly define a `before-hook-creation`
# policy as well, to avoid failing on existing resources (`before-hook-creation` is the default `hook-delete-policy`
# if none is specified`).
#
# The following resources implement this workaround.
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "solo.io/hook-cleanup": "true" # Used internally to mark "hook cleanup" resources
  name: certgen
  namespace: default
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get", "update"]
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
# The following resources implement the hook cleanup workaround.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "solo.io/hook-cleanup": "true" # Used internally to mark "hook cleanup" resources
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get", "update"] # .Values.global.glooRbac.create
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
# The following resources implement the hook cleanup workaround.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-gateway-secret-create-vwc-update-default
  labels:
    app: gloo
    gloo: rbac
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "solo.io/hook-cleanup": "true" # Used internally to mark "hook cleanup" resources
subjects:
- kind: ServiceAccount
  name: certgen
  namespace: default
roleRef:
  kind: ClusterRole
  name: gloo-gateway-secret-create-vwc-update-default
  apiGroup: rbac.authorization.k8s.io
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/6.5-gateway-certgen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: gloo
    gloo: gateway-certgen
  name: gateway-certgen
  namespace: default
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        gloo: gateway-certgen
    spec:
      serviceAccountName: certgen
      containers:
        - image: quay.io/solo-io/certgen:1.4.10
          imagePullPolicy: IfNotPresent
          name: certgen
          securityContext:
            runAsNonRoot: true
            runAsUser: 10101
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "--secret-name=gateway-validation-certs"
            - "--svc-name=gateway"
            - "--validating-webhook-configuration-name=gloo-gateway-validation-webhook-default"
      restartPolicy: OnFailure
  # this feature is still in Alpha, which means it must be manually enabled in the k8s api server
  # with --feature-gates="TTLAfterFinished=true". This flag also works with minikube start ...
  # if the feature flag is not enabled in the k8s api server, this setting will be silently ignored at creation time
  ttlSecondsAfterFinished: 60
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/5-gateway-validation-webhook-configuration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: gloo-gateway-validation-webhook-default
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "5" # must be executed before cert-gen job
webhooks:
- name: gateway.default.svc  # must be a domain with at least three segments separated by dots
  clientConfig:
    service:
      name: gateway
      namespace: default
      path: "/validation"
    caBundle: "" # update manually or use certgen job
  rules:
  - operations: [ "CREATE", "UPDATE", "DELETE" ]
    apiGroups: ["gateway.solo.io"]
    apiVersions: ["v1"]
    resources: ["*"]
  sideEffects: None
  failurePolicy: Ignore
---
# Source: gloo/charts/gloo-os-with-ui/charts/gloo/templates/5-gateway-validation-webhook-configuration.yaml
# Resources created as hooks are not considered part of a release by Helm. This means that they
# will not be cleaned up when running `helm uninstall`.
# See https://helm.sh/docs/topics/charts_hooks/#hook-resources-are-not-managed-with-corresponding-releases).
# To be able to clean up the above hook resource, we redefine it as a `post-delete` hook with a `hook-delete-policy`.
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: gloo-gateway-validation-webhook-default
  labels:
    app: gloo
    gloo: gateway
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "solo.io/hook-cleanup": "true" # Used internally to mark "hook cleanup" resources
webhooks:
- name: gateway.default.svc
  clientConfig:
    service:
      name: gateway
      namespace: default
      path: "/validation"
    caBundle: ""
  rules:
  - operations: [ "CREATE", "UPDATE", "DELETE" ]
    apiGroups: ["gateway.solo.io"]
    apiVersions: ["v1"]
    resources: ["*"]
  sideEffects: None
  failurePolicy: Ignore
